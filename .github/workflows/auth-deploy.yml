name: Deploy to production

on:
  push:
    branches: [ deploy-frontend ]
    paths:
      - ".github/workflows/auth-deploy.yml"
      - "back-end/services/authService/**/*"

env:
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  ECR_REPOSITORY: ${{ secrets.AUTH_REPO }}
  IMAGE_TAG: latest
  AWS_DEFAULT_OUTPUT: json
  ECS_SERVICE: auth-public
  ECS_CLUSTER: ecs-fargate-cluster-cs3219
  ECS_TASK_DEFINITION: ecs-fargate-cs3219-authservice

jobs:
  build-and-push:
    name: Push Auth Service to ECR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and tag the image
        working-directory: ./back-end/services/authService
        run:
          # Build and tag the image
          docker build -t $AWS_ACCOUNT_ID.dkr.ecr.ap-southeast-1.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG .
      - name: Push the image into ECR
        run: docker push $AWS_ACCOUNT_ID.dkr.ecr.ap-southeast-1.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Download task definition
        run: aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION --query taskDefinition --region ap-southeast-1 > task-definition.json

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@master
        with:
          task-definition: task-definition.json
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
          force-new-deployment: true
